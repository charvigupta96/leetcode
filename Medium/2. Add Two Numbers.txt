/*
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int sum=0,carry=0,a=0,b=0;
        ListNode *result = new ListNode(0);
        ListNode *current = result;
        while(l1 != NULL or l2 != NULL){
            if(l1 == NULL){
                a=0;
            }
            else{
                a=l1->val;
            }
            if(l2==NULL){
                b=0;
            }
            else{
                b=l2->val;
            }
            sum = a+b+carry;
            carry=sum/10;
            if(sum>=10){
                int digit = sum%10;
                current->next = new ListNode(digit);
                current=current->next;
            }
            else{
                current->next = new ListNode(sum);
                current=current->next;
            }
            l1 = l1 == NULL ? NULL : l1->next;
            l2 = l2 == NULL ? NULL : l2->next;
        }
        if (carry>0){
            current->next = new ListNode(carry);
            current=current->next;
        }
        return result->next;
    }
};