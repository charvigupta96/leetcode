/*
Given a string s, find the length of the longest substring without repeating characters.

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
Example 4:

Input: s = ""
Output: 0

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
*/
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int result = 0;
        int count;
        unordered_set<char> set;
        if (s.compare("")==0) 
            return 0;
        for (int i=0;i<s.size();i++){
            set.insert(s[i]);
            count=1;
            for (int j=i+1;j<s.size();j++){
                if(set.find(s[j])==set.end()){
                    set.insert(s[j]);
                    count += 1;
                }
                else{
                    set.clear();
                    break;
                }
            }
            result = max(result,count);
        }
        return result;
    }
};